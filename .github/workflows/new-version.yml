name: Create a new version 

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'version'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  create-new-version:
    name: Update version
    permissions:
        contents: write
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version-bump.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: 'main'
          fetch-depth: 0
          fetch-tags: true

      - name: install
        run: yarn install --immutable

      - name: log
        run: |
          git config --global user.email "botexample.com"
          git config --global user.name "Mr. Bot"
          current_date=$(date +"%Y-%m-%d %H:%M:%S")
          echo "The current date is: $current_date"
          echo "$current_date" >> log.txt
          git add . 
          git commit -m "update log"
          
      - name: version bump
        id: version-bump
        run: |
          VERSION=$(npm version ${{ inputs.version }})
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "version=$VERSION" >> version.txt

      - name: push tag
        run: git push origin main --tags

  package:
    needs: [create-new-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-new-version.outputs.version }}
      - run: |
          mkdir dist
          cp log.txt dist
          cp package.json dist
          zip build-${{ needs.create-new-version.outputs.version }}.zip dist -r
          md5sum -b build-${{ needs.create-new-version.outputs.version }}.zip | awk '{ print $1 }' > build-${{ needs.create-new-version.outputs.version }}.zip.md5
          ls -al
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-package
          path: |
            build-${{ needs.create-new-version.outputs.version }}.zip
            build-${{ needs.create-new-version.outputs.version }}.zip.md5
          retention-days: 1

  release:
    needs: [package, 'create-new-version']
    name: Create GH release
    permissions:
        contents: write
    runs-on: ubuntu-latest
    steps:      
      - name: Get artifact
        uses: actions/download-artifact@v4
        with:
          name: build-package
          path: dist
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          generate_release_notes: true
          tag_name: ${{ needs.create-new-version.outputs.version }}
          release_name: Release ${{ needs.create-new-version.outputs.version }}
          body: |
            TBC
          draft: false
          prerelease: false
          files: dist/*
            
  deploy-to-dev:
    needs: ['create-new-version']
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: deploy to dev
        run: echo Deployed to dev ${{ needs.create-new-version.outputs.version }}

  deploy-to-ops:
    needs: ['create-new-version']  
    runs-on: ubuntu-latest
    environment: ops
    steps:
      - name: deploy to ops
        run: echo Deployed to ops ${{ needs.create-new-version.outputs.version }}

  deploy-to-prod:
    needs: ['create-new-version']
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: deploy to prod
        run: echo Deployed to prod ${{ needs.create-new-version.outputs.version }}


